"use strict";(self.webpackChunkcsv_to_qlab=self.webpackChunkcsv_to_qlab||[]).push([[822],{7322:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"developer/testing","title":"Testing Guide","description":"CSV to QLab uses pytest for testing with comprehensive coverage of the configuration-driven architecture.","source":"@site/docs/developer/testing.md","sourceDirName":"developer","slug":"/developer/testing","permalink":"/docs/developer/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/fross123/csv_to_qlab/edit/main/website/docs/developer/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"OSC Configuration Schema","permalink":"/docs/developer/osc-config-schema"},"next":{"title":"Building Releases","permalink":"/docs/developer/building-releases"}}');var i=s(4848),r=s(8453);const l={sidebar_position:4},o="Testing Guide",c={},d=[{value:"Test Suite Overview",id:"test-suite-overview",level:2},{value:"Running Tests",id:"running-tests",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Run All Tests",id:"run-all-tests",level:3},{value:"Run Specific Test Files",id:"run-specific-test-files",level:3},{value:"Run Specific Test Classes or Functions",id:"run-specific-test-classes-or-functions",level:3},{value:"Test Files",id:"test-files",level:2},{value:"<code>test_osc_config.py</code>",id:"test_osc_configpy",level:3},{value:"<code>test_csv_parser.py</code>",id:"test_csv_parserpy",level:3},{value:"<code>test_app.py</code>",id:"test_apppy",level:3},{value:"Critical Tests Explained",id:"critical-tests-explained",level:2},{value:"1. Duplicate Property Detection",id:"1-duplicate-property-detection",level:3},{value:"2. Property Validation",id:"2-property-validation",level:3},{value:"3. Version Isolation",id:"3-version-isolation",level:3},{value:"Writing New Tests",id:"writing-new-tests",level:2},{value:"Test Structure",id:"test-structure",level:3},{value:"Using Fixtures",id:"using-fixtures",level:3},{value:"Mocking External Dependencies",id:"mocking-external-dependencies",level:3},{value:"Coverage Goals",id:"coverage-goals",level:2},{value:"Adding Tests for New Properties",id:"adding-tests-for-new-properties",level:2},{value:"1. Add Validation Test",id:"1-add-validation-test",level:3},{value:"2. Update Duplicate Detection Test",id:"2-update-duplicate-detection-test",level:3},{value:"3. Add Type Conversion Test (if applicable)",id:"3-add-type-conversion-test-if-applicable",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"CI Configuration",id:"ci-configuration",level:3},{value:"Test Dependencies",id:"test-dependencies",level:2},{value:"Common Test Patterns",id:"common-test-patterns",level:2},{value:"Testing Configuration Loading",id:"testing-configuration-loading",level:3},{value:"Testing OSC Message Building",id:"testing-osc-message-building",level:3},{value:"Testing CSV Parsing",id:"testing-csv-parsing",level:3},{value:"Debugging Failed Tests",id:"debugging-failed-tests",level:2},{value:"Verbose Output",id:"verbose-output",level:3},{value:"Run Single Test",id:"run-single-test",level:3},{value:"Use pytest.set_trace() for Debugging",id:"use-pytestset_trace-for-debugging",level:3},{value:"Test Coverage Reports",id:"test-coverage-reports",level:2},{value:"Terminal Report",id:"terminal-report",level:3},{value:"HTML Report",id:"html-report",level:3},{value:"Coverage by Module",id:"coverage-by-module",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Import Errors",id:"import-errors",level:3},{value:"Coverage Not Working",id:"coverage-not-working",level:3},{value:"Mocking Errors",id:"mocking-errors",level:3},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-guide",children:"Testing Guide"})}),"\n",(0,i.jsx)(n.p,{children:"CSV to QLab uses pytest for testing with comprehensive coverage of the configuration-driven architecture."}),"\n",(0,i.jsx)(n.h2,{id:"test-suite-overview",children:"Test Suite Overview"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Total Coverage: 86%"})}),"\n",(0,i.jsx)(n.p,{children:"The test suite includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"50 total tests"}),"\n",(0,i.jsx)(n.li,{children:"28 OSC configuration tests"}),"\n",(0,i.jsx)(n.li,{children:"17 CSV parsing tests"}),"\n",(0,i.jsx)(n.li,{children:"5 integration tests"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Activate virtual environment\r\nsource env/bin/activate\r\n\r\n# Install test dependencies\r\npip install -r requirements.txt\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-all-tests",children:"Run All Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\r\npython -m pytest\r\n\r\n# Run with verbose output\r\npython -m pytest -v\r\n\r\n# Run with coverage report\r\npython -m pytest --cov=app --cov-report=term-missing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-specific-test-files",children:"Run Specific Test Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# OSC configuration tests only\r\npython -m pytest app/tests/test_osc_config.py -v\r\n\r\n# CSV parser tests only\r\npython -m pytest app/tests/test_csv_parser.py -v\r\n\r\n# Integration tests only\r\npython -m pytest app/tests/test_app.py -v\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-specific-test-classes-or-functions",children:"Run Specific Test Classes or Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run specific test class\r\npython -m pytest app/tests/test_osc_config.py::TestDuplicatePropertyNames -v\r\n\r\n# Run specific test function\r\npython -m pytest app/tests/test_osc_config.py::TestDuplicatePropertyNames::test_no_duplicate_property_names_global_vs_cue_specific -v\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-files",children:"Test Files"}),"\n",(0,i.jsx)(n.h3,{id:"test_osc_configpy",children:(0,i.jsx)(n.code,{children:"test_osc_config.py"})}),"\n",(0,i.jsx)(n.p,{children:"Tests for OSC configuration loading and validation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Critical Tests:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Duplicate property name detection"})," - Prevents silent failures"]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Property validation (ranges, enums, types)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Version-specific properties (QLab 4 vs 5)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Auto-properties"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Conditional properties"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def test_no_duplicate_property_names_global_vs_cue_specific():\r\n    """Verify no property names overlap between global and cue-specific"""\r\n    # This test prevents configuration errors where the same property\r\n    # name exists in both global_properties and cue_type_properties,\r\n    # which would cause the global property to always win in lookups\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test_csv_parserpy",children:(0,i.jsx)(n.code,{children:"test_csv_parser.py"})}),"\n",(0,i.jsx)(n.p,{children:"Tests for CSV parsing and OSC message generation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Covered Areas:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CSV parsing and header normalization"}),"\n",(0,i.jsx)(n.li,{children:"Property processing"}),"\n",(0,i.jsx)(n.li,{children:"Passcode handling"}),"\n",(0,i.jsx)(n.li,{children:"Cue type validation"}),"\n",(0,i.jsx)(n.li,{children:"Edge cases (unicode, special characters)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test_apppy",children:(0,i.jsx)(n.code,{children:"test_app.py"})}),"\n",(0,i.jsx)(n.p,{children:"Integration tests for the Flask application."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Covered Areas:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"HTTP endpoints"}),"\n",(0,i.jsx)(n.li,{children:"File upload handling"}),"\n",(0,i.jsx)(n.li,{children:"QLab version handling"}),"\n",(0,i.jsx)(n.li,{children:"Error responses"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"critical-tests-explained",children:"Critical Tests Explained"}),"\n",(0,i.jsx)(n.h3,{id:"1-duplicate-property-detection",children:"1. Duplicate Property Detection"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why it's critical:"})," If a property name exists in both ",(0,i.jsx)(n.code,{children:"global_properties"})," and a cue type's properties, the global property always wins. This causes silent failures where cue-specific properties are never used."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Location:"})," ",(0,i.jsx)(n.code,{children:"test_osc_config.py::TestDuplicatePropertyNames"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What it checks:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Fails if any property name appears in both:\r\nglobal_props = {"level": {...}}\r\ncue_type_props = {"audio": {"level": {...}}}  # CONFLICT!\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-property-validation",children:"2. Property Validation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why it's critical:"})," Invalid values sent to QLab can cause cues to be created with wrong settings."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Location:"})," ",(0,i.jsx)(n.code,{children:"test_osc_config.py::TestPropertyValidation"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What it checks:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Numeric ranges (e.g., ",(0,i.jsx)(n.code,{children:"continueMode"})," must be 0-2)"]}),"\n",(0,i.jsxs)(n.li,{children:["Valid values lists (e.g., ",(0,i.jsx)(n.code,{children:"color"})," must be from approved list)"]}),"\n",(0,i.jsx)(n.li,{children:"Type conversion (int, float, bool, string)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-version-isolation",children:"3. Version Isolation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why it's critical:"})," QLab 4 and 5 have different OSC properties, especially for network cues."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Location:"})," ",(0,i.jsx)(n.code,{children:"test_osc_config.py::TestVersionSpecificProperties"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What it checks:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["QLab 5 ",(0,i.jsx)(n.code,{children:"customstring"})," not available in QLab 4"]}),"\n",(0,i.jsxs)(n.li,{children:["QLab 4 ",(0,i.jsx)(n.code,{children:"messagetype"})," not available in QLab 5"]}),"\n",(0,i.jsx)(n.li,{children:"Version-specific properties don't leak across versions"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"writing-new-tests",children:"Writing New Tests"}),"\n",(0,i.jsx)(n.h3,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pytest\r\nfrom osc_config import OSCConfig\r\n\r\nclass TestNewFeature:\r\n    """Test description"""\r\n\r\n    def test_feature_works(self):\r\n        """Specific test case"""\r\n        config = OSCConfig()\r\n        result = config.some_method()\r\n        assert result is not None\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-fixtures",children:"Using Fixtures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@pytest.fixture\r\ndef config():\r\n    """Reusable OSC config"""\r\n    return OSCConfig()\r\n\r\ndef test_with_fixture(config):\r\n    assert config is not None\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-external-dependencies",children:"Mocking External Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from unittest.mock import Mock, patch\r\n\r\ndef test_with_mock():\r\n    with patch('csv_parser.udp_client.UDPClient') as mock_client:\r\n        mock_client.return_value = Mock()\r\n        # Test code that uses UDP client\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coverage-goals",children:"Coverage Goals"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Module"}),(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Current"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"osc_config.py"})}),(0,i.jsx)(n.td,{children:"95%+"}),(0,i.jsx)(n.td,{children:"94% \u2705"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"csv_parser.py"})}),(0,i.jsx)(n.td,{children:"90%+"}),(0,i.jsx)(n.td,{children:"100% \u2705"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"application.py"})}),(0,i.jsx)(n.td,{children:"80%+"}),(0,i.jsx)(n.td,{children:"82% \u2705"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Overall"}),(0,i.jsx)(n.td,{children:"85%+"}),(0,i.jsx)(n.td,{children:"86% \u2705"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"adding-tests-for-new-properties",children:"Adding Tests for New Properties"}),"\n",(0,i.jsxs)(n.p,{children:["When adding a new property to ",(0,i.jsx)(n.code,{children:"qlab_osc_config.json"}),":"]}),"\n",(0,i.jsx)(n.h3,{id:"1-add-validation-test",children:"1. Add Validation Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def test_new_property_validation(config):\r\n    \"\"\"Test the new property validates correctly\"\"\"\r\n    msg = config.build_osc_message('newproperty', 'valid_value')\r\n    assert msg is not None\r\n\r\n    msg = config.build_osc_message('newproperty', 'invalid_value')\r\n    assert msg is None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-update-duplicate-detection-test",children:"2. Update Duplicate Detection Test"}),"\n",(0,i.jsx)(n.p,{children:"The duplicate detection test automatically checks all properties, so no changes needed if following naming conventions."}),"\n",(0,i.jsx)(n.h3,{id:"3-add-type-conversion-test-if-applicable",children:"3. Add Type Conversion Test (if applicable)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def test_new_property_type_conversion(config):\r\n    """Test type conversion for new property"""\r\n    # For int properties\r\n    msg = config.build_osc_message(\'newproperty\', \'5\')\r\n    assert msg is not None\n'})}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.p,{children:"Tests run automatically on GitHub Actions for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pull requests"}),"\n",(0,i.jsx)(n.li,{children:"Pushes to main branch"}),"\n",(0,i.jsx)(n.li,{children:"Release workflows"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ci-configuration",children:"CI Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.code,{children:".github/workflows/pytest.yml"})," for CI setup."]}),"\n",(0,i.jsx)(n.h2,{id:"test-dependencies",children:"Test Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["From ",(0,i.jsx)(n.code,{children:"requirements.txt"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pytest>=8.0.0"})," - Testing framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pytest-cov>=4.1.0"})," - Coverage reporting"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-test-patterns",children:"Common Test Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"testing-configuration-loading",children:"Testing Configuration Loading"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def test_config_loads():\r\n    config = OSCConfig()\r\n    assert config.global_properties is not None\r\n    assert config.cue_type_properties is not None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-osc-message-building",children:"Testing OSC Message Building"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def test_build_message():\r\n    config = OSCConfig()\r\n    msg = config.build_osc_message('name', 'Test Cue')\r\n    assert msg is not None\r\n    built = msg.build()\r\n    assert built is not None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-csv-parsing",children:"Testing CSV Parsing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from unittest.mock import Mock, patch\r\n\r\ndef test_csv_parsing():\r\n    with patch('csv_parser.udp_client.UDPClient') as mock_client:\r\n        csv_content = MockFileStorage(\"Number,Type,Name\\n1,audio,Test\")\r\n        send_csv('127.0.0.1', csv_content, 5, '')\r\n        assert mock_client.return_value.send.called\n"})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-failed-tests",children:"Debugging Failed Tests"}),"\n",(0,i.jsx)(n.h3,{id:"verbose-output",children:"Verbose Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m pytest -vv  # Extra verbose\r\npython -m pytest -s   # Show print statements\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-single-test",children:"Run Single Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m pytest app/tests/test_osc_config.py::test_name -vv\n"})}),"\n",(0,i.jsx)(n.h3,{id:"use-pytestset_trace-for-debugging",children:"Use pytest.set_trace() for Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def test_something():\r\n    import pytest\r\n    pytest.set_trace()  # Drops into debugger\r\n    # Test code\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-coverage-reports",children:"Test Coverage Reports"}),"\n",(0,i.jsx)(n.h3,{id:"terminal-report",children:"Terminal Report"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m pytest --cov=app --cov-report=term-missing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"html-report",children:"HTML Report"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m pytest --cov=app --cov-report=html\r\nopen htmlcov/index.html\n"})}),"\n",(0,i.jsx)(n.h3,{id:"coverage-by-module",children:"Coverage by Module"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m pytest --cov=app --cov-report=term-missing | grep app/\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test behavior, not implementation"})," - Test what the code does, not how it does it"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive test names"})," - ",(0,i.jsx)(n.code,{children:"test_no_duplicate_property_names_global_vs_cue_specific"})," is better than ",(0,i.jsx)(n.code,{children:"test_duplicates"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"One assertion per test"})," (when possible) - Makes failures easier to debug"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock external dependencies"})," - Don't make real network calls or file I/O in unit tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test edge cases"})," - Empty strings, unicode, very long values, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep tests fast"})," - Mock slow operations, avoid sleep()"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"import-errors",children:"Import Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Make sure you're in the project root\r\ncd /path/to/csv_to_qlab\r\n\r\n# Make sure virtual env is activated\r\nsource env/bin/activate\r\n\r\n# Reinstall dependencies\r\npip install -r requirements.txt\n"})}),"\n",(0,i.jsx)(n.h3,{id:"coverage-not-working",children:"Coverage Not Working"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install coverage separately\r\npip install pytest-cov\r\n\r\n# Check pytest plugins\r\npython -m pytest --version\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-errors",children:"Mocking Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Use correct import path\r\n# \u274c Wrong: with patch('osc_config') as mock:\r\n# \u2705 Right: with patch('csv_parser.get_osc_config') as mock:\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/developer/architecture",children:"Architecture Overview"})," - System design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/developer/adding-properties",children:"Adding Properties Guide"})," - Extend configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/developer/osc-config-schema",children:"OSC Configuration Schema"})," - JSON structure"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);